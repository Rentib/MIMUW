diff -rupNEZbB original/usr/src/include/unistd.h solve/usr/src/include/unistd.h
--- original/usr/src/include/unistd.h	2023-07-09 14:24:08.147801142 +0200
+++ solve/usr/src/include/unistd.h	2023-07-12 15:27:23.196530097 +0200
@@ -411,5 +411,9 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+void wait_for_parent(void);
+void wait_for_child(void);
+void wait_for_sibling(void);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB original/usr/src/lib/libc/misc/Makefile.inc solve/usr/src/lib/libc/misc/Makefile.inc
--- original/usr/src/lib/libc/misc/Makefile.inc	2023-07-09 14:24:08.324467816 +0200
+++ solve/usr/src/lib/libc/misc/Makefile.inc	2023-07-12 15:25:05.133201251 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c wait_for.c
diff -rupNEZbB original/usr/src/lib/libc/misc/wait_for.c solve/usr/src/lib/libc/misc/wait_for.c
--- original/usr/src/lib/libc/misc/wait_for.c	1970-01-01 01:00:00.000000000 +0100
+++ solve/usr/src/lib/libc/misc/wait_for.c	2023-07-12 15:27:00.916530818 +0200
@@ -0,0 +1,31 @@
+#include <lib.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+static void wait_for(int flag);
+
+void
+wait_for(int flag)
+{
+	message m;
+	m.m_lc_pm_wait_for.flag = flag;
+	_syscall(PM_PROC_NR, PM_WAIT_FOR, &m);
+}
+
+void
+wait_for_parent(void)
+{
+	wait_for(1);
+}
+
+void
+wait_for_child(void)
+{
+	wait_for(2);
+}
+
+void
+wait_for_sibling(void)
+{
+	wait_for(3);
+}
diff -rupNEZbB original/usr/src/minix/include/minix/callnr.h solve/usr/src/minix/include/minix/callnr.h
--- original/usr/src/minix/include/minix/callnr.h	2023-07-09 14:24:08.737801166 +0200
+++ solve/usr/src/minix/include/minix/callnr.h	2023-07-12 14:36:12.399963347 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_WAIT_FOR		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB original/usr/src/minix/include/minix/ipc.h solve/usr/src/minix/include/minix/ipc.h
--- original/usr/src/minix/include/minix/ipc.h	2023-07-09 14:24:08.741134499 +0200
+++ solve/usr/src/minix/include/minix/ipc.h	2023-07-12 14:37:25.946627620 +0200
@@ -588,6 +588,13 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_lc_pm_waitpid);
 
 typedef struct {
+	int flag;
+
+	uint8_t padding[52];
+} mess_lc_pm_wait_for;
+_ASSERT_MSG_SIZE(mess_lc_pm_wait_for);
+
+typedef struct {
 	cp_grant_id_t grant;
 	vir_bytes tm;			/* struct tm * */
 	int flags;
@@ -2094,6 +2101,7 @@ typedef struct {
 		mess_lc_pm_sysuname	m_lc_pm_sysuname;
 		mess_lc_pm_time		m_lc_pm_time;
 		mess_lc_pm_waitpid	m_lc_pm_waitpid;
+		mess_lc_pm_wait_for	m_lc_pm_wait_for;
 		mess_lc_readclock_rtcdev m_lc_readclock_rtcdev;
 		mess_lc_vfs_chown	m_lc_vfs_chown;
 		mess_lc_vfs_close	m_lc_vfs_close;
diff -rupNEZbB original/usr/src/minix/servers/pm/forkexit.c solve/usr/src/minix/servers/pm/forkexit.c
--- original/usr/src/minix/servers/pm/forkexit.c	2023-07-09 14:24:08.871134504 +0200
+++ solve/usr/src/minix/servers/pm/forkexit.c	2023-07-12 15:20:54.016542777 +0200
@@ -112,6 +112,7 @@ int do_fork()
   /* Find a free pid for the child and put it in the table. */
   new_pid = get_free_pid();
   rmc->mp_pid = new_pid;	/* assign pid to child */
+  rmc->wait_for = 0;
 
   memset(&m, 0, sizeof(m));
   m.m_type = VFS_PM_FORK;
@@ -204,6 +205,7 @@ int do_srv_fork()
   /* Find a free pid for the child and put it in the table. */
   new_pid = get_free_pid();
   rmc->mp_pid = new_pid;	/* assign pid to child */
+  rmc->wait_for = 0;
 
   memset(&m, 0, sizeof(m));
   m.m_type = VFS_PM_SRV_FORK;
diff -rupNEZbB original/usr/src/minix/servers/pm/main.c solve/usr/src/minix/servers/pm/main.c
--- original/usr/src/minix/servers/pm/main.c	2023-07-09 14:24:08.871134504 +0200
+++ solve/usr/src/minix/servers/pm/main.c	2023-07-12 15:21:16.696542038 +0200
@@ -206,6 +206,7 @@ static int sef_cb_init_fresh(int UNUSED(
   			}
   			rmp->mp_pid = get_free_pid();
 			rmp->mp_flags |= IN_USE | PRIV_PROC;
+			rmp->wait_for = 0;
 
 			/* RS schedules this process */
 			rmp->mp_scheduler = NONE;
diff -rupNEZbB original/usr/src/minix/servers/pm/mproc.h solve/usr/src/minix/servers/pm/mproc.h
--- original/usr/src/minix/servers/pm/mproc.h	2023-07-09 14:24:08.871134504 +0200
+++ solve/usr/src/minix/servers/pm/mproc.h	2023-07-12 15:21:04.009875782 +0200
@@ -70,6 +70,8 @@ EXTERN struct mproc {
   char mp_name[PROC_NAME_LEN];	/* process name */
 
   int mp_magic;			/* sanity check, MP_MAGIC */
+
+  int wait_for;
 } mproc[NR_PROCS];
 
 /* Flag values */
diff -rupNEZbB original/usr/src/minix/servers/pm/proto.h solve/usr/src/minix/servers/pm/proto.h
--- original/usr/src/minix/servers/pm/proto.h	2023-07-09 14:24:08.871134504 +0200
+++ solve/usr/src/minix/servers/pm/proto.h	2023-07-12 14:39:39.536623272 +0200
@@ -67,6 +67,7 @@ int do_sigpending(void);
 int do_sigprocmask(void);
 int do_sigreturn(void);
 int do_sigsuspend(void);
+int do_wait_for(void);
 void check_pending(struct mproc *rmp);
 void restart_sigs(struct mproc *rmp);
 void vm_notify_sig_wrapper(endpoint_t ep);
diff -rupNEZbB original/usr/src/minix/servers/pm/signal.c solve/usr/src/minix/servers/pm/signal.c
--- original/usr/src/minix/servers/pm/signal.c	2023-07-09 14:24:08.871134504 +0200
+++ solve/usr/src/minix/servers/pm/signal.c	2023-08-28 15:45:22.771228566 +0200
@@ -869,3 +869,52 @@ void vm_notify_sig_wrapper(endpoint_t ep
 	}
   }
 }
+
+/*===========================================================================*
+ *				do_wait_for				     *
+ *===========================================================================*/
+int do_wait_for(void)
+{
+	int flag, n;
+	struct mproc *rmp;
+
+	flag = m_in.m_lc_pm_wait_for.flag;
+	n = 0;
+
+	if (flag == 1) { // wait for parent
+		rmp = &mproc[mp->mp_parent];
+		if (rmp->wait_for == 2) {
+			n++;
+			rmp->wait_for = 0;
+			try_resume_proc(rmp);
+		}
+	} else if (flag == 2) { // wait for child
+		for (int i = 0; i < NR_PROCS; ++i) {
+			rmp = &mproc[i];
+			if (mproc[rmp->mp_parent].mp_pid == mp->mp_pid &&
+			    rmp->wait_for == 1) {
+				n++;
+				rmp->wait_for = 0;
+				try_resume_proc(rmp);
+				break;
+			}
+		}
+	} else if (flag == 3) { // wait for sibling
+		for (int i = 0; i < NR_PROCS; ++i) {
+			rmp = &mproc[i];
+			if (rmp->mp_parent == mp->mp_parent &&
+			    rmp->wait_for == 3 && rmp->mp_pid != mp->mp_pid) {
+				n++;
+				rmp->wait_for = 0;
+				try_resume_proc(rmp);
+			}
+		}
+	}
+
+	if (n == 0) {
+		mp->wait_for = flag;
+		stop_proc(mp, FALSE);
+	}
+
+	return(OK);
+}
diff -rupNEZbB original/usr/src/minix/servers/pm/table.c solve/usr/src/minix/servers/pm/table.c
--- original/usr/src/minix/servers/pm/table.c	2023-07-09 14:24:08.871134504 +0200
+++ solve/usr/src/minix/servers/pm/table.c	2023-07-12 14:39:09.943290902 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(PM_WAIT_FOR)	= do_wait_for,
 };
