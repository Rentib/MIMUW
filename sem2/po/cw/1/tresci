Zaprojektuj

Stos, Kolejka

Stos<Type> {
  void push(x : Type)
  void pop()
  boolean empty()
  Type top()
}

Kolejka<Type> {
  void push(x : Type)
  void pop()
  boolean empty()
  Type front()
}

Graf
  + skierowany
  - nieskierowany
  + lista sąsiedztwa (incydencji)
  - macierz sąsiedztwa

Graf {
  void dodaj_wierzchołek(v : Wierzchołek)
  /* dodaj_krawędź(e : Krawędź) */
  void dodaj_krawędź(v : Wierzchołek, u : Wierzchołek)
  void dodaj_krawędź_nieskierowaną(v : Wierzchołek, u : Wierzchołek)

  Kolekcja<Wierzchołek> daj_wierzchołki()
  Kolekcja<Wierzchołek> daj_sąsiadów(v : Wierzchołek)
}

Kolekcja<Type> {
  void dodaj(v : Type)
  void usuń(v : Type)
  /* int rozmiar() */
  /* Type daj(indeks : int) */

  /* taki jakby iterator */
  boolean hasNext()
  Type Next()
  void reset()
}

Wierzchołek {
  void odwiedź()
}

/* BFS */
standardowe, robiłem na tablicy

/* DFS */
standardowe, wystarczy zamienić w tym co robiłem na tablicy Kolejka na Stos
